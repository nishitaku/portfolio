---
import { Image } from 'astro:assets';
import iconImage from '../images/icon.jpg';

const navItems = [
  { name: 'About', href: './about/' },
  { name: 'Resume', href: './resume/' },
  { name: 'Blog', href: './blog/' },
];
const active = Astro.url.pathname.replace('/portfolio', '.');
---

<div
  class="bg-base-100 bg-opacity-90 text-base-content sticky top-0 z-30 flex h-16 w-full justify-center shadow-sm backdrop-blur transition-all duration-100"
>
  <div class="navbar">
    <div class="navbar-start">
      <div class="dropdown">
        <div tabindex="0" role="button" class="btn btn-ghost sm:hidden">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-5 w-5"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h8m-8 6h16"></path>
          </svg>
        </div>
        <ul
          tabindex="0"
          class="menu menu-sm dropdown-content bg-base-100 rounded-box z-1 mt-3 w-52 p-2 shadow"
        >
          {
            navItems.map(({ name, href }) => (
              <li>
                <a
                  class:list={['text-base', active === href ? 'font-bold' : '']}
                  href={href}
                >
                  {name}
                </a>
              </li>
            ))
          }
        </ul>
      </div>
      <div class="hidden sm:flex">
        <a href="./">
          <div
            class="avatar m-auto block transition ease-in-out hover:scale-[102%]"
          >
            <Image
              class="mask mask-circle"
              format="webp"
              width={56}
              height={56}
              src={iconImage}
              alt="Profile image"
            />
          </div>
        </a>
      </div>
    </div>
    <div class="navbar-center">
      <div class="hidden sm:flex">
        <ul class="menu menu-horizontal">
          {
            navItems.map(({ name, href }) => (
              <li>
                <a
                  class:list={['text-base', active === href ? 'font-bold' : '']}
                  href={href}
                >
                  {name}
                </a>
              </li>
            ))
          }
        </ul>
      </div>
      <div class="sm:hidden">
        <a href="./">
          <div
            class="avatar m-auto block transition ease-in-out hover:scale-[102%]"
          >
            <Image
              class="mask mask-circle"
              format="webp"
              width={56}
              height={56}
              src={iconImage}
              alt="Profile image"
            />
          </div>
        </a>
      </div>
    </div>
    <div class="navbar-end">
      <label class="flex cursor-pointer gap-2">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="20"
          height="20"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
        >
          <circle cx="12" cy="12" r="5"></circle>
          <path
            d="M12 1v2M12 21v2M4.2 4.2l1.4 1.4M18.4 18.4l1.4 1.4M1 12h2M21 12h2M4.2 19.8l1.4-1.4M18.4 5.6l1.4-1.4"
          ></path>
        </svg>
        <input type="checkbox" value="night" class="toggle theme-controller" />
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="20"
          height="20"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
        >
          <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
        </svg>
      </label>
    </div>
  </div>
</div>
<script>
  const themeController = document.querySelector('.theme-controller');
  if (themeController) {
    const theme = (() => {
      if (
        typeof localStorage !== 'undefined' &&
        localStorage.getItem('theme')
      ) {
        return localStorage.getItem('theme');
      }

      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
        return 'night';
      }

      return 'winter';
    })();

    const setTheme = (theme: any) => {
      document.documentElement.setAttribute('data-theme', theme);
      localStorage.setItem('theme', theme);
      if (themeController instanceof HTMLInputElement) {
        themeController.checked = theme === 'night';
      }
    };

    themeController.addEventListener('change', (e) => {
      const target = e.target as HTMLInputElement;
      setTheme(target.checked ? 'night' : 'winter');
    });

    setTheme(theme);
  }
</script>
